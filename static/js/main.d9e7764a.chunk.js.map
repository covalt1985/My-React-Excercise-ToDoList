{"version":3,"sources":["components/newToDoForm/index.js","components/listButtons/index.js","components/toDo/index.js","components/toDoList/index.js","App.js","reportWebVitals.js","index.js"],"names":["NewToDoForm","props","state","task","updateState","bind","handleAddingNewToDo","evt","this","setState","target","name","value","preventDefault","addToDo","id","uuid","className","onSubmit","htmlFor","autoFocus","type","placeholder","onChange","Component","ListButtons","handleClick","action","onClick","func","ToDo","isEditing","newValue","isCompleted","editButtonHandle","saveEditedForm","toggleTaskCompletion","remove","editListState","checked","result","ToDoList","toDo","removeToDo","editState","newToDo","curSt","filter","item","editedToDo","map","el","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9e7764a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\n\r\nimport './style.css';\r\n\r\nclass NewToDoForm extends Component {\r\n constructor(props) {\r\n  super(props);\r\n\r\n  this.state = { task: '' };\r\n\r\n  this.updateState = this.updateState.bind(this);\r\n  this.handleAddingNewToDo = this.handleAddingNewToDo.bind(this);\r\n }\r\n\r\n updateState(evt) {\r\n  this.setState({ [evt.target.name]: evt.target.value });\r\n }\r\n\r\n handleAddingNewToDo(evt) {\r\n  evt.preventDefault();\r\n\r\n  if (this.state.task) {\r\n   this.props.addToDo({ ...this.state, id: uuid() });\r\n   this.setState({ task: '' });\r\n  }\r\n }\r\n\r\n render() {\r\n  return (\r\n   <div>\r\n    <form className=\"newToDoForm\" onSubmit={this.handleAddingNewToDo}>\r\n     <label htmlFor=\"task\">New Todo</label>\r\n\r\n     <input\r\n      autoFocus\r\n      id=\"task\"\r\n      type=\"text\"\r\n      name=\"task\"\r\n      value={this.state.task}\r\n      placeholder=\"New Todo\"\r\n      onChange={this.updateState}\r\n     />\r\n\r\n     <button>Add Todo</button>\r\n    </form>\r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default NewToDoForm;\r\n","import React, { Component } from 'react';\r\nclass ListButtons extends Component {\r\n constructor(props) {\r\n  super(props);\r\n\r\n  this.handleClick = this.handleClick.bind(this);\r\n }\r\n\r\n handleClick() {\r\n  this.props.action(this.props.id);\r\n }\r\n\r\n render() {\r\n  return (\r\n   <div>\r\n    <button className=\"button\" onClick={this.handleClick}>\r\n     {this.props.func}\r\n    </button>\r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default ListButtons;\r\n","import React, { Component } from 'react';\r\n\r\nimport ListButtons from '../listButtons/index';\r\nimport './style.css';\r\n\r\nclass ToDo extends Component {\r\n constructor(props) {\r\n  super(props);\r\n\r\n  this.state = {\r\n   isEditing: false,\r\n   newValue: this.props.task,\r\n   isCompleted: false,\r\n  };\r\n\r\n  this.editButtonHandle = this.editButtonHandle.bind(this);\r\n  this.saveEditedForm = this.saveEditedForm.bind(this);\r\n  this.updateState = this.updateState.bind(this);\r\n  this.toggleTaskCompletion = this.toggleTaskCompletion.bind(this);\r\n }\r\n\r\n editButtonHandle() {\r\n  this.setState({\r\n   isEditing: !this.state.isEditing,\r\n  });\r\n }\r\n\r\n updateState(evt) {\r\n  this.setState({ [evt.target.name]: evt.target.value });\r\n }\r\n\r\n saveEditedForm(evt) {\r\n  //update state and pass it to the parent component state\r\n  evt.preventDefault();\r\n  if (!this.state.newValue) {\r\n   return this.props.remove(this.props.id);\r\n  }\r\n  this.props.editListState(this.props.id, this.state.newValue);\r\n  this.setState({ isEditing: !this.state.isEditing });\r\n }\r\n\r\n toggleTaskCompletion(evt) {\r\n  this.setState({ isCompleted: evt.target.checked });\r\n }\r\n\r\n render() {\r\n  let result;\r\n\r\n  if (this.state.isEditing) {\r\n   result = (\r\n    <div className=\"toDo\">\r\n     <form onSubmit={this.saveEditedForm}>\r\n      <input\r\n       autoFocus\r\n       type=\"text\"\r\n       name=\"newValue\"\r\n       value={this.state.newValue}\r\n       onChange={this.updateState}\r\n      />\r\n      <button className=\"button\">{<i className=\"far fa-save\"></i>}</button>\r\n     </form>\r\n\r\n     <ListButtons\r\n      func={<i className=\"far fa-trash-alt\"></i>}\r\n      id={this.props.id}\r\n      action={this.props.remove}\r\n     />\r\n    </div>\r\n   );\r\n  } else {\r\n   result = (\r\n    <div className=\"toDo\">\r\n     <li\r\n      className={this.state.isCompleted ? 'toDo-task completed' : 'toDo-task'}>\r\n      <label className=\"container\">\r\n       <span className=\"text\">{this.props.task}</span>\r\n       <input\r\n        type=\"checkbox\"\r\n        className=\"checkbox\"\r\n        onChange={this.toggleTaskCompletion}\r\n       />\r\n       <span className=\"checkmark\"></span>\r\n      </label>\r\n     </li>\r\n\r\n     <div className=\"buttons\">\r\n      {!this.state.isEditing && !this.state.isCompleted && (\r\n       <ListButtons\r\n        func={<i className=\"fas fa-edit\"></i>}\r\n        action={this.editButtonHandle}\r\n       />\r\n      )}\r\n      <ListButtons\r\n       func={<i className=\"far fa-trash-alt\"></i>}\r\n       id={this.props.id}\r\n       action={this.props.remove}\r\n      />\r\n     </div>\r\n    </div>\r\n   );\r\n  }\r\n\r\n  return <div>{result}</div>;\r\n }\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { Component } from 'react';\r\n\r\nimport NewToDoForm from '../newToDoForm/index';\r\nimport ToDo from '../toDo/index';\r\nimport './style.css';\r\n\r\nclass ToDoList extends Component {\r\n constructor(props) {\r\n  super(props);\r\n\r\n  this.state = {\r\n   toDo: [],\r\n  };\r\n\r\n  this.addToDo = this.addToDo.bind(this);\r\n  this.removeToDo = this.removeToDo.bind(this);\r\n  this.editState = this.editState.bind(this);\r\n }\r\n\r\n addToDo(newToDo) {\r\n  this.setState(curSt => ({\r\n   toDo: [...curSt.toDo, newToDo],\r\n  }));\r\n }\r\n\r\n removeToDo(id) {\r\n  this.setState(curSt => ({\r\n   toDo: curSt.toDo.filter(item => {\r\n    return item.id !== id;\r\n   }),\r\n  }));\r\n }\r\n\r\n editState(id, newValue) {\r\n  const editedToDo = this.state.toDo.map(el => {\r\n   if (el.id === id) {\r\n    el.task = newValue;\r\n   }\r\n   return el;\r\n  });\r\n\r\n  this.setState({ toDo: editedToDo });\r\n }\r\n\r\n render() {\r\n  const toDo = this.state.toDo.map(toDo => {\r\n   return (\r\n    <div key={toDo.id}>\r\n     <ToDo\r\n      task={toDo.task}\r\n      id={toDo.id}\r\n      remove={this.removeToDo}\r\n      editListState={this.editState}\r\n     />\r\n    </div>\r\n   );\r\n  });\r\n\r\n  return (\r\n   <div className=\"toDoList\">\r\n    <h2>\r\n     Todo List! <span>React app</span>\r\n    </h2>\r\n    <ul>{toDo}</ul>\r\n    <NewToDoForm addToDo={this.addToDo} />\r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default ToDoList;\r\n","import './App.css';\n\nimport ToDoList from './components/toDoList/index';\n\nfunction App() {\n return (\n  <div className=\"App\">\n   <ToDoList />\n  </div>\n );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
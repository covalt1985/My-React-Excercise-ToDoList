{"version":3,"sources":["components/newToDoForm/index.js","components/listButtons/index.js","components/toDo/index.js","components/toDoList/index.js","App.js","reportWebVitals.js","index.js"],"names":["NewToDoForm","props","state","task","updateState","bind","handleAddingNewToDo","evt","this","setState","target","name","value","preventDefault","addToDo","id","uuid","completed","className","onSubmit","htmlFor","autoFocus","type","placeholder","onChange","Component","ListButtons","handleClick","action","onClick","func","ToDo","isEditing","newValue","isCompleted","editButtonHandle","saveEditedForm","toggleTaskCompletion","remove","editListState","a","checked","changeCompletion","result","ToDoList","toDo","removeToDo","editState","clearAllDone","newToDo","curSt","filter","item","editedToDo","map","el","changed","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87cc2a15.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\n\r\nimport './style.css';\r\n\r\nclass NewToDoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { task: '' };\r\n\r\n    this.updateState = this.updateState.bind(this);\r\n    this.handleAddingNewToDo = this.handleAddingNewToDo.bind(this);\r\n  }\r\n\r\n  updateState(evt) {\r\n    this.setState({ [evt.target.name]: evt.target.value });\r\n  }\r\n\r\n  handleAddingNewToDo(evt) {\r\n    evt.preventDefault();\r\n\r\n    if (this.state.task) {\r\n      this.props.addToDo({ ...this.state, id: uuid(), completed: false });\r\n      this.setState({ task: '' });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form className=\"newToDoForm\" onSubmit={this.handleAddingNewToDo}>\r\n          <label htmlFor=\"task\">New Todo</label>\r\n\r\n          <input\r\n            autoFocus\r\n            id=\"task\"\r\n            type=\"text\"\r\n            name=\"task\"\r\n            value={this.state.task}\r\n            placeholder=\"New Todo\"\r\n            onChange={this.updateState}\r\n          />\r\n\r\n          <button>Add Todo</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewToDoForm;\r\n","import React, { Component } from 'react';\r\nclass ListButtons extends Component {\r\n constructor(props) {\r\n  super(props);\r\n\r\n  this.handleClick = this.handleClick.bind(this);\r\n }\r\n\r\n handleClick() {\r\n  this.props.action(this.props.id);\r\n }\r\n\r\n render() {\r\n  return (\r\n   <div>\r\n    <button className=\"button\" onClick={this.handleClick}>\r\n     {this.props.func}\r\n    </button>\r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default ListButtons;\r\n","import React, { Component } from 'react';\r\n\r\nimport ListButtons from '../listButtons/index';\r\nimport './style.css';\r\n\r\nclass ToDo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isEditing: false,\r\n      newValue: this.props.task,\r\n      isCompleted: false,\r\n    };\r\n\r\n    this.editButtonHandle = this.editButtonHandle.bind(this);\r\n    this.saveEditedForm = this.saveEditedForm.bind(this);\r\n    this.updateState = this.updateState.bind(this);\r\n    this.toggleTaskCompletion = this.toggleTaskCompletion.bind(this);\r\n  }\r\n\r\n  editButtonHandle() {\r\n    this.setState({\r\n      isEditing: !this.state.isEditing,\r\n    });\r\n  }\r\n\r\n  updateState(evt) {\r\n    this.setState({ [evt.target.name]: evt.target.value });\r\n  }\r\n\r\n  saveEditedForm(evt) {\r\n    //update state and pass it to the parent component state\r\n    evt.preventDefault();\r\n    if (!this.state.newValue) {\r\n      return this.props.remove(this.props.id);\r\n    }\r\n    this.props.editListState(this.props.id, this.state.newValue);\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n\r\n  async toggleTaskCompletion(evt) {\r\n    await this.setState({ isCompleted: evt.target.checked });\r\n    this.props.changeCompletion(this.props.id, this.state.isCompleted);\r\n  }\r\n\r\n  render() {\r\n    let result;\r\n\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"toDo\">\r\n          <form onSubmit={this.saveEditedForm}>\r\n            <input\r\n              autoFocus\r\n              type=\"text\"\r\n              name=\"newValue\"\r\n              value={this.state.newValue}\r\n              onChange={this.updateState}\r\n            />\r\n            <button className=\"button\">\r\n              {<i className=\"far fa-save\"></i>}\r\n            </button>\r\n          </form>\r\n\r\n          <ListButtons\r\n            func={<i className=\"far fa-trash-alt\"></i>}\r\n            id={this.props.id}\r\n            action={this.props.remove}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className=\"toDo\">\r\n          <li\r\n            className={\r\n              this.state.isCompleted ? 'toDo-task completed' : 'toDo-task'\r\n            }>\r\n            <label className=\"container\">\r\n              <span className=\"text\">{this.props.task}</span>\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"checkbox\"\r\n                onChange={this.toggleTaskCompletion}\r\n              />\r\n              <span className=\"checkmark\"></span>\r\n            </label>\r\n          </li>\r\n\r\n          <div className=\"buttons\">\r\n            {!this.state.isEditing && !this.state.isCompleted && (\r\n              <ListButtons\r\n                func={<i className=\"fas fa-edit\"></i>}\r\n                action={this.editButtonHandle}\r\n              />\r\n            )}\r\n            <ListButtons\r\n              func={<i className=\"far fa-trash-alt\"></i>}\r\n              id={this.props.id}\r\n              action={this.props.remove}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div>{result}</div>;\r\n  }\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { Component } from 'react';\r\n\r\nimport NewToDoForm from '../newToDoForm/index';\r\nimport ToDo from '../toDo/index';\r\nimport './style.css';\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      toDo: [],\r\n    };\r\n\r\n    this.addToDo = this.addToDo.bind(this);\r\n    this.removeToDo = this.removeToDo.bind(this);\r\n    this.editState = this.editState.bind(this);\r\n    this.changeCompletion = this.changeCompletion.bind(this);\r\n    this.clearAllDone = this.clearAllDone.bind(this);\r\n  }\r\n\r\n  addToDo(newToDo) {\r\n    this.setState(curSt => ({\r\n      toDo: [...curSt.toDo, newToDo],\r\n    }));\r\n  }\r\n\r\n  removeToDo(id) {\r\n    this.setState(curSt => ({\r\n      toDo: curSt.toDo.filter(item => {\r\n        return item.id !== id;\r\n      }),\r\n    }));\r\n  }\r\n\r\n  editState(id, newValue) {\r\n    const editedToDo = this.state.toDo.map(el => {\r\n      if (el.id === id) {\r\n        el.task = newValue;\r\n      }\r\n      return el;\r\n    });\r\n\r\n    this.setState({ toDo: editedToDo });\r\n  }\r\n\r\n  changeCompletion(id, isCompleted) {\r\n    const changed = this.state.toDo.filter(item => item.id === id);\r\n    changed[0].completed = isCompleted;\r\n    this.setState(curSt => ({\r\n      toDo: curSt.toDo.map(item => {\r\n        return item.id === id ? changed[0] : item;\r\n      }),\r\n    }));\r\n  }\r\n\r\n  clearAllDone() {\r\n    this.setState(curSt => ({\r\n      toDo: curSt.toDo.filter(item => !item.completed),\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const toDo = this.state.toDo.map(toDo => {\r\n      return (\r\n        <div key={toDo.id}>\r\n          <ToDo\r\n            task={toDo.task}\r\n            id={toDo.id}\r\n            remove={this.removeToDo}\r\n            editListState={this.editState}\r\n            changeCompletion={this.changeCompletion}\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"toDoList\">\r\n        <h2>\r\n          Todo List! <span>React app</span>\r\n        </h2>\r\n        <ul>{toDo}</ul>\r\n        <NewToDoForm addToDo={this.addToDo} />\r\n        <button className=\"clearAll\" onClick={this.clearAllDone}>\r\n          Clear All Done\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import './App.css';\n\nimport ToDoList from './components/toDoList/index';\n\nfunction App() {\n return (\n  <div className=\"App\">\n   <ToDoList />\n  </div>\n );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}